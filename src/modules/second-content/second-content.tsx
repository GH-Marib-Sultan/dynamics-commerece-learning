/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import * as React from 'react';

import { ISecondContentData } from './second-content.data';
import { ISecondContentProps, imgAlignment } from './second-content.props.autogenerated';
import { getDimensionValuesAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';
import { ProductDimensionValue, ProductDimension } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';
import { AsyncResult } from '@msdyn365-commerce/retail-proxy/dist/async-result';

export interface IImageOptions {
    imgCSS: React.CSSProperties,
    imgSrc: string
}

export interface IDivOptions {
    divCSS: React.CSSProperties,
    bgColor: string
}


const _renderDiv = (divCSS: React.CSSProperties, bgColor?: string): JSX.Element => {
    divCSS = JSON.parse(JSON.stringify(divCSS))
    divCSS.backgroundColor = bgColor || divCSS.backgroundColor;
    return <div style={divCSS}></div>;
};

const _renderImg = (imgCSS: React.CSSProperties, imgSrc: string): JSX.Element => {
    return <img src={imgSrc} style={imgCSS} />;
};

const _renderView = (imgAlign: imgAlignment, imgOptions: IImageOptions, divOptions: IDivOptions): JSX.Element => {

    let left: JSX.Element;
    let right: JSX.Element;

    if (imgAlign == imgAlignment.left) {
        left = _renderImg(imgOptions.imgCSS, imgOptions.imgSrc);
        right = _renderDiv(divOptions.divCSS, divOptions.bgColor);
    } else {
        right = _renderImg(imgOptions.imgCSS, imgOptions.imgSrc);
        left = _renderDiv(divOptions.divCSS, divOptions.bgColor);
    }

    return (
        <div>
            {left}
            {right}
        </div>
    )

}


const _callDataAction = async (props: ISecondContentProps<ISecondContentData>) => {
    const { context } = props;
    const recordId = +"68719490634";
    const channelId = context.actionContext.requestContext.apiSettings.channelId;
    const callerContext = context.actionContext;
    const matchingDimensionValues: ProductDimension[] = [];
    const dimensionTypeValue: number = 1;
    return await getDimensionValuesAsync({ callerContext, queryResultSettings: {} }, recordId, channelId, dimensionTypeValue, matchingDimensionValues,
        // @ts-ignore: KitVariantResolution context should be nullable
        null);
}

const onButtonClick = (props: ISecondContentProps<ISecondContentData>) => {
    return async (event: React.MouseEvent) => {
        try {
            let result: ProductDimensionValue[] = await _callDataAction(props);
            console.log(result[0])
        } catch (error) {
        }
    }
}

/**
 *
 * SecondContent component
 * @extends {React.PureComponent<ISecondContentProps<ISecondContentData>>}
 */
export default class SecondContent extends React.PureComponent<ISecondContentProps<ISecondContentData>> {
    public render(): JSX.Element {
        const { config, resources } = this.props;

        const imgOptions: IImageOptions = {
            imgSrc: config.imgSrc,
            imgCSS: imgStyle
        }

        const divOptions: IDivOptions = {
            bgColor: config.bgColor,
            divCSS: divStyle
        }

        this.props.data.customDAResponse.then(res => {
            console.log("Text response from my data action = ", res.text);
        }).catch(err => {
            console.log("err = ", err);
        });

        console.log("Products = ", this.props.data.products);
        this.props.data.products[0]
            .then(
                res => { console.log("PR ", res.Description) }
            ).catch(
                err => { console.log("ER ", err) }
            )
        return (
            <div>
                {/* {_renderDiv(divStyle)}
                {_renderDiv(divStyle, "blue")}
                {_renderImg(imgStyle, config.imgSrc)}
                <h2>Img Alignment: {config.imgAlignment}</h2> */}
                {_renderView(config.imgAlignment, imgOptions, divOptions)}
                <button onClick={onButtonClick(this.props)}> Click to fetch data</button>
            </div>
        );
    }
}

const divStyle: React.CSSProperties = {
    height: "200px",
    width: "200px",
    backgroundColor: "red",
    display: "inline-block"
}


const imgStyle: React.CSSProperties = {
    height: "200px",
    width: "200px",
}